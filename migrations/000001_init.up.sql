CREATE TABLE roles (
	"id" SERIAL NOT NULL UNIQUE PRIMARY KEY,
	"role" TEXT NOT NULL UNIQUE,
	"permissions" INT NOT NULL DEFAULT 0
);

CREATE TABLE users (
	"id" SERIAL NOT NULL UNIQUE PRIMARY KEY,
	"login" TEXT NOT NULL UNIQUE,
	"nickname" TEXT NOT NULL UNIQUE,
	"role" TEXT NOT NULL DEFAULT 'user' REFERENCES "roles" ("role") ON UPDATE CASCADE ON DELETE CASCADE,
	"password" TEXT NOT NULL,
	"salt" TEXT NOT NULL,
	"balance" BIGINT DEFAULT 0,
	"register_date" BIGINT NOT NULL
);

CREATE TABLE created_invites (
	"invite" TEXT NOT NULL UNIQUE PRIMARY KEY,
	"author_id" INT NOT NULL REFERENCES "users" ("id") ON UPDATE CASCADE ON DELETE CASCADE,
	"create_time" BIGINT NOT NULL
);

CREATE TABLE activated_invites (
	"invite" TEXT NOT NULL UNIQUE PRIMARY KEY REFERENCES "created_invites" ("invite") ON UPDATE CASCADE ON DELETE CASCADE,
	"activated_by" INT NOT NULL UNIQUE REFERENCES "users" ("id") ON UPDATE CASCADE ON DELETE CASCADE,
	"activate_time" BIGINT NOT NULL
);

CREATE TABLE social_profiles (
	"user_id" INT NOT NULL UNIQUE PRIMARY KEY REFERENCES "users" ("id") ON UPDATE CASCADE ON DELETE CASCADE,
	"bio" TEXT DEFAULT '',
	"telegram" TEXT DEFAULT '',
	"discord" TEXT DEFAULT '',
	"is_wall_closed" BOOLEAN DEFAULT TRUE,
	"is_comments_closed" BOOLEAN DEFAULT TRUE
);

CREATE TABLE social_messages (
	"id" BIGINT NOT NULL UNIQUE PRIMARY KEY,
	"author_id" INT NOT NULL REFERENCES "users" ("id") ON UPDATE CASCADE ON DELETE CASCADE,
	"user_id" INT NOT NULL REFERENCES "users" ("id") ON UPDATE CASCADE ON DELETE CASCADE,
	"content" TEXT NOT NULL
);

CREATE TABLE social_replies (
	"id" BIGINT NOT NULL UNIQUE PRIMARY KEY,
	"user_id" INT NOT NULL REFERENCES "users" ("id") ON UPDATE CASCADE ON DELETE CASCADE,
	"message_id" BIGINT NOT NULL REFERENCES "social_messages" ("id") ON UPDATE CASCADE ON DELETE CASCADE,
	"content" TEXT NOT NULL,
	"author_id" INT NOT NULL REFERENCES "users" ("id") ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE social_likes (
	"id" BIGINT NOT NULL REFERENCES "social_messages" ("id") ON UPDATE CASCADE ON DELETE CASCADE,
	"from" INT NOT NULL REFERENCES "users" ("id") ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE social_subscribers (
	"subscriber_id" INT NOT NULL REFERENCES "users" ("id") ON UPDATE CASCADE ON DELETE CASCADE,
	"user_id" INT NOT NULL REFERENCES "users" ("id") ON UPDATE CASCADE ON DELETE CASCADE
);